diff --git a/Makefile b/Makefile
index 39a99d7..f03dc8d 100644
--- a/Makefile
+++ b/Makefile
@@ -28,7 +28,8 @@ OBJS = \
   $K/sysfile.o \
   $K/kernelvec.o \
   $K/plic.o \
-  $K/virtio_disk.o
+  $K/virtio_disk.o\
+  $K/rand.o\
 
 # riscv64-unknown-elf- or riscv64-linux-gnu-
 # perhaps in /opt/riscv/bin
@@ -132,6 +133,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_testprocinfo\
+	$U/_dummyproc\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -153,7 +156,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..4b436d1 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -9,6 +9,7 @@ struct sleeplock;
 struct stat;
 struct superblock;
 
+
 // bio.c
 void            binit(void);
 struct buf*     bread(uint, uint);
@@ -106,6 +107,11 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             settickets(int);  // for OFFLINE 3............
+int             getpinfo(uint64); // for OFFLINE 3............
+void            reset_ticket(void);   // for OFFLINE 3............
+int             total_current_ticket(void); // for OFFLINE 3............
+
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -187,3 +193,7 @@ void            virtio_disk_intr(void);
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
+
+
+// rand.c
+long genrand(int); // OFFLINE 3...........
\ No newline at end of file
diff --git a/kernel/param.h b/kernel/param.h
index 6624bff..df5628f 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -11,3 +11,9 @@
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
 #define FSSIZE       2000  // size of file system in blocks
 #define MAXPATH      128   // maximum file path name
+
+
+#define TIME_LIMIT_1 1            // offline 3 ...time for queue 1
+#define TIME_LIMIT_2 2            // offline 3 ...time for queue 2
+#define BOOST_INTERVAL 64         // offline 3 
+#define DEFAULT_TICKET_COUNT 10   // offline 3.....original ticket count for processes
\ No newline at end of file
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..da2dcac 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,7 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "pstat.h"
 
 struct cpu cpus[NCPU];
 
@@ -114,6 +115,13 @@ allocproc(void)
   for(p = proc; p < &proc[NPROC]; p++) {
     acquire(&p->lock);
     if(p->state == UNUSED) {
+      // initiate proc properties for offline 3.......
+
+      p->queue_no=1;
+      p->original_no_of_tickets=DEFAULT_TICKET_COUNT;
+      p->current_no_of_tickets=DEFAULT_TICKET_COUNT;
+      p->total_no_of_time_slices=0;
+      p->time_slices_in_current_queue=0;
       goto found;
     } else {
       release(&p->lock);
@@ -125,6 +133,7 @@ found:
   p->pid = allocpid();
   p->state = USED;
 
+
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
     freeproc(p);
@@ -296,6 +305,8 @@ fork(void)
   }
   np->sz = p->sz;
 
+
+
   // copy saved user registers.
   *(np->trapframe) = *(p->trapframe);
 
@@ -318,8 +329,26 @@ fork(void)
   np->parent = p;
   release(&wait_lock);
 
+
+
+  // read ticket amount from parent process.offline 3........
+  int parent_ticket_count=0;
+
+  acquire(&p->lock);
+  parent_ticket_count=p->original_no_of_tickets;
+  release(&p->lock);
+
+
   acquire(&np->lock);
   np->state = RUNNABLE;
+
+  /// update properties for child process....offline 3......
+  np->queue_no=1;
+  np->original_no_of_tickets=parent_ticket_count;
+  np->current_no_of_tickets=parent_ticket_count;
+  np->total_no_of_time_slices=0;
+  np->time_slices_in_current_queue=0;
+
   release(&np->lock);
 
   return pid;
@@ -434,6 +463,41 @@ wait(uint64 addr)
   }
 }
 
+
+//OFFLINE 3....ticket calculation...................
+int 
+total_current_ticket()
+{
+  struct proc *p;
+  int current_tickets = 0;
+  for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    if( p->state == RUNNABLE && p->queue_no==1) 
+      current_tickets+=p->current_no_of_tickets;
+    release(&p->lock);
+   
+  }
+  return current_tickets;
+
+}
+
+void
+reset_ticket()
+{
+  struct proc *p;
+  
+  for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    p->current_no_of_tickets=p->original_no_of_tickets;
+    release(&p->lock);
+   
+  }
+  
+
+}
+
+
+
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
 // Scheduler never returns.  It loops, doing:
@@ -452,19 +516,133 @@ scheduler(void)
     // Avoid deadlock by ensuring that devices can interrupt.
     intr_on();
 
+
+    //OFFLINE 3........LOTTERY SCHEDULING.....................
+
+    //check the tickets..............................
+
+    //int active_tickets=total_current_ticket();
+
+    int active_tickets=0;
+    for(p = proc; p < &proc[NPROC]; p++){
+      acquire(&p->lock);
+      if( p->state == RUNNABLE && p->queue_no==1) 
+        active_tickets+=p->current_no_of_tickets;
+      release(&p->lock);
+   
+    }
+    if(active_tickets==0)
+    {
+        for(p = proc; p < &proc[NPROC]; p++){
+          acquire(&p->lock);
+          p->current_no_of_tickets=p->original_no_of_tickets;
+          release(&p->lock);
+   
+        }
+      continue;
+    }
+
+    
+
+    int rand_num = genrand(active_tickets)+1; /// the random number for lottery scheduling
+    int curr_sum = 0;  /// to store prefix ticket count for lottery scheduling
+   
+    //if lottery scheduling is done, don't go for round robin
+    int done=0;
     for(p = proc; p < &proc[NPROC]; p++) {
       acquire(&p->lock);
-      if(p->state == RUNNABLE) {
+      if(p->state == RUNNABLE && p->queue_no == 1) {
+        if(p->current_no_of_tickets > 0)
+          curr_sum+=p->current_no_of_tickets;
+        else if(curr_sum >= rand_num && p->current_no_of_tickets>0 && done == 0)  /// condition for process selection
+        {
+          done=1;
+          
+          // Switch to chosen process.  It is the process's job
+          // to release its lock and then reacquire it
+          // before jumping back to us.
+          p->state = RUNNING;
+
+          //OFFLINE 3,.................................
+          p->total_no_of_time_slices+=1;
+          p->time_slices_in_current_queue=1;
+          p->current_no_of_tickets-=1;  /// use ticket for lottery scheduling............
+
+
+
+          c->proc = p;
+          swtch(&c->context, &p->context);
+
+          // Process is done running for now.
+          // It should have changed its p->state before coming back.
+
+
+
+          // perfect time for queue management( queue switching).....offline 3....
+
+          if( p-> state == RUNNABLE) // consumed all time slices, switch it to lower level queue....
+          {
+            p->queue_no=2;
+            p->time_slices_in_current_queue=0;
+          }
+          else if( p->state == SLEEPING) // voluntarily (basically in sleep), switch it to upper level queue....
+          {
+            p->queue_no=1;
+            p->time_slices_in_current_queue=0;
+          }
+
+          c->proc = 0;
+         
+        }
+      }
+      release(&p->lock);
+    }
+
+    if(done==1)
+      continue;
+
+    
+
+    for(p = proc; p < &proc[NPROC]; p++) {
+      acquire(&p->lock);
+
+      //ROUND ROBIN........................
+      if(p->state == RUNNABLE && p->queue_no == 2 && done == 0) {
+        done=1;
         // Switch to chosen process.  It is the process's job
         // to release its lock and then reacquire it
         // before jumping back to us.
+
+        // OFFLINE 3...............no need to keep track of ticket counts....
         p->state = RUNNING;
+
+        //OFFLINE 3,.................................
+        p->total_no_of_time_slices+=1;
+        p->time_slices_in_current_queue=1;
+
         c->proc = p;
         swtch(&c->context, &p->context);
 
         // Process is done running for now.
         // It should have changed its p->state before coming back.
+
+
+
+        // perfect time for queue management( queue switching).....offline 3....
+
+        if( p-> state == RUNNABLE) // consumed all time slices, switch it to lower level queue....
+        {
+          p->queue_no=2;
+          p->time_slices_in_current_queue=0;
+        }
+        else if( p->state == SLEEPING)// voluntarily (basically in sleep), switch it to upper level queue....
+        {
+          p->queue_no=1;
+          p->time_slices_in_current_queue=0;
+        }
+
         c->proc = 0;
+       
       }
       release(&p->lock);
     }
@@ -504,8 +682,28 @@ yield(void)
 {
   struct proc *p = myproc();
   acquire(&p->lock);
-  p->state = RUNNABLE;
-  sched();
+  
+
+  /// not every time we need to call sched()....offline 3.....
+  if ( p->queue_no==1 && p->time_slices_in_current_queue>=TIME_LIMIT_1){
+    p->state = RUNNABLE;
+    sched();
+  }
+    
+  else if ( p->queue_no==2 && p->time_slices_in_current_queue>=TIME_LIMIT_2){
+    p->state = RUNNABLE;
+    sched();
+  }
+    
+  else if(p->state==RUNNING){
+    if(p->queue_no==1)
+      p->current_no_of_tickets-=1;
+    p->total_no_of_time_slices+=1;
+    p->time_slices_in_current_queue+=1;
+  }
+
+
+
   release(&p->lock);
 }
 
@@ -681,3 +879,39 @@ procdump(void)
     printf("\n");
   }
 }
+
+
+// OFFLINE 3..............
+int 
+settickets(int amount){
+
+  struct proc *mp = myproc();
+  acquire(&mp->lock);
+  mp->original_no_of_tickets = amount;
+  mp->current_no_of_tickets = amount;
+  release(&mp->lock);
+  return 0;
+}
+
+int 
+getpinfo(uint64 addr){
+
+  struct proc *mp = myproc();
+  struct proc *p;
+  struct pstat pst;
+  int i=0;
+  for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    pst.pid[i] = p->pid;
+    pst.inuse[i] = p->state != UNUSED;
+    pst.inQ[i]=p->queue_no;
+    pst.tickets_original[i] = p->original_no_of_tickets;
+    pst.tickets_current[i] = p->current_no_of_tickets;
+    pst.total_time_slices[i] = p->total_no_of_time_slices;
+    release(&p->lock);
+    i++;
+  }
+  if(copyout(mp->pagetable, addr, (char *)&pst, sizeof(pst)) < 0)
+    return -1;
+  return 0;
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..19bb16e 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,13 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+
+  // for offline 3.......
+  int queue_no;
+  int original_no_of_tickets;
+  int current_no_of_tickets;
+  int total_no_of_time_slices;
+  int time_slices_in_current_queue;
+
 };
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..bc1a4e3
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,15 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+#include "param.h"
+
+struct pstat {
+  int pid[NPROC]; // the process ID of each process 
+  int inuse[NPROC]; // whether this slot of the process table is being used (1 or 0)
+  int inQ[NPROC]; // which queue the process is currently in 
+  int tickets_original[NPROC]; // the number of tickets each process originally had
+  int tickets_current[NPROC]; // the number of tickets each process currently has
+  int total_time_slices[NPROC]; // the number of time slices each process has been scheduled
+  
+};
+
+#endif // _PSTAT_H_
diff --git a/kernel/rand.c b/kernel/rand.c
new file mode 100644
index 0000000..5ca5270
--- /dev/null
+++ b/kernel/rand.c
@@ -0,0 +1,129 @@
+/*C-program for MT19937: Real number version  (1998/4/6)    */
+/*   genrand() generates one pseudorandom real number (double) */
+/* which is uniformly distributed on [0,1]-interval, for each  */
+/* call. sgenrand(seed) set initial values to the working area */
+/* of 624 words. Before genrand(), sgenrand(seed) must be      */
+/* called once. (seed is any 32-bit integer except for 0).     */
+/* Integer generator is obtained by modifying two lines.       */
+/*   Coded by Takuji Nishimura, considering the suggestions by */
+/* Topher Cooper and Marc Rieffel in July-Aug. 1997.           */
+
+/* This library is free software; you can redistribute it and/or   */
+/* modify it under the terms of the GNU Library General Public     */
+/* License as published by the Free Software Foundation; either    */
+/* version 2 of the License, or (at your option) any later         */
+/* version.                                                        */
+/* This library is distributed in the hope that it will be useful, */
+/* but WITHOUT ANY WARRANTY; without even the implied warranty of  */
+/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.            */
+/* See the GNU Library General Public License for more details.    */
+/* You should have received a copy of the GNU Library General      */
+/* Public License along with this library; if not, write to the    */
+/* Free Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA   */ 
+/* 02111-1307  USA                                                 */
+
+/* Copyright (C) 1997 Makoto Matsumoto and Takuji Nishimura.       */
+/* When you use this, send an email to: matumoto@math.keio.ac.jp   */
+/* with an appropriate reference to your work.                     */
+
+/* REFERENCE                                                       */
+/* M. Matsumoto and T. Nishimura,                                  */
+/* "Mersenne Twister: A 623-Dimensionally Equidistributed Uniform  */
+/* Pseudo-Random Number Generator",                                */
+/* ACM Transactions on Modeling and Computer Simulation,           */
+/* Vol. 8, No. 1, January 1998, pp 3--30.                          */
+
+// #include<stdio.h>
+
+/* Period parameters */  
+#define N 624
+#define M 397
+#define MATRIX_A 0x9908b0df   /* constant vector a */
+#define UPPER_MASK 0x80000000 /* most significant w-r bits */
+#define LOWER_MASK 0x7fffffff /* least significant r bits */
+
+/* Tempering parameters */   
+#define TEMPERING_MASK_B 0x9d2c5680
+#define TEMPERING_MASK_C 0xefc60000
+#define TEMPERING_SHIFT_U(y)  (y >> 11)
+#define TEMPERING_SHIFT_S(y)  (y << 7)
+#define TEMPERING_SHIFT_T(y)  (y << 15)
+#define TEMPERING_SHIFT_L(y)  (y >> 18)
+#define RAND_MAX 0x7fffffff
+static unsigned long mt[N]; /* the array for the state vector  */
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+static int set = 0;
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(seed)
+    unsigned long seed;	
+{
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+    for (mti=1; mti<N; mti++)
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+}
+
+long  /* for integer generation */
+genrand(int upper)
+{
+    if( set == 0 ){
+        sgenrand(4357);
+        set = 1;
+    }
+    
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+        int kk;
+
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+            sgenrand(4357); /* a default initial seed is used   */
+
+        for (kk=0;kk<N-M;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+        }
+        for (;kk<N-1;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+        }
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+    y ^= TEMPERING_SHIFT_U(y);
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+    y ^= TEMPERING_SHIFT_L(y);
+   // int mx = 1000;
+   // double val1 = ( (double)y * 2.3283064370807974e-10 );
+   // int val2 = val1*mx;
+   // return val2;
+    //return ( (double)y * 2.3283064370807974e-10 ); /* reals */
+    y = y & RAND_MAX;
+    y = y % upper;
+     return y;  /* for integer generation */
+}
+
+/* this main() outputs first 1000 generated numbers  */
+//
+// main()
+// { 
+//     int j;
+
+//     sgenrand(4357); /* any nonzero integer can be used as a seed */
+//     for (j=0; j<1000; j++) {
+//         printf("%10.8f ", genrand());
+//         if (j%8==7) printf("\n");
+//     }
+//     printf("\n");
+//}
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..bc4e1b2 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_settickets(void); //OFFLINE 3
+extern uint64 sys_getpinfo(void); //OFFLINE 3
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets] sys_settickets,
+[SYS_getpinfo] sys_getpinfo,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..7926b7f 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets 22
+#define SYS_getpinfo 23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..16e9a78 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,6 +5,7 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "pstat.h"
 
 uint64
 sys_exit(void)
@@ -89,3 +90,35 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+
+
+// OFFLINE 3
+// sets the ticket count
+uint64
+sys_settickets(void)
+{
+  int n;
+  argint(0,&n);
+  if( n < 1)
+  {
+    settickets(DEFAULT_TICKET_COUNT);
+    return -1;
+  }
+  else{
+    return settickets(n);
+  }
+
+}
+
+// get the process info
+uint64
+sys_getpinfo(void)
+{
+  uint64 addr;
+  argaddr(0, &addr);
+  if( addr < 0 )
+    return -1;
+  return getpinfo(addr); 
+ 
+}
\ No newline at end of file
diff --git a/offine3.txt b/offine3.txt
new file mode 100644
index 0000000..07ea628
--- /dev/null
+++ b/offine3.txt
@@ -0,0 +1,28 @@
+-->pstat.h is added
+-->param.h is updated with constants
+
+
+--> proc.h is modified as we need new attributes ( queue no, ticket original, ticket current, 
+total time slices, total time slices in current queue ) 
+
+
+--> in allocproc() in proc.c, we initialized our newly added attributes for processes...
+--> in fork() in proc.c, we initialized our newly added attributes for child processes.....
+
+
+--> we allocate multiple time slices for queue 2...so we don't need to sched() every time a time-slice ends
+    so change in yield() function,,,,,
+
+--> then, we should do queue management when a process returns to scheduler after some time slices (after swtch call in
+    schedular) 
+
+--> two functions are added in proc.c for ticket number reset and active ticket calculation
+
+
+--> schedular is updated with MLFQ
+
+-->adding the system calls-
+    user.h -> usys.pl -> syscall.c -> syscall.h -> sysproc.c -> proc.c
+
+--> adding user program
+    add the c file --> 
\ No newline at end of file
diff --git a/user/dummyproc.c b/user/dummyproc.c
new file mode 100644
index 0000000..fd07fe1
--- /dev/null
+++ b/user/dummyproc.c
@@ -0,0 +1,26 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc,char *argv[]){
+
+    
+    if( argc<2 ){
+        fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+        exit(1);
+    }
+    int ticket = atoi(argv[1]);
+    if (settickets(ticket) < 0) {
+        fprintf(2, "%s: exec failed\n", argv[0]);
+        exit(1);
+    }
+   
+    
+    // test fork
+    if( fork() == 0 ){
+        //fork();
+        while(1);
+    }
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/testprocinfo.c b/user/testprocinfo.c
new file mode 100644
index 0000000..12f77ab
--- /dev/null
+++ b/user/testprocinfo.c
@@ -0,0 +1,25 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/pstat.h"
+int
+main(int argc,char *argv[]){
+    struct pstat p;
+    if (getpinfo(&p) < 0) {
+        fprintf(2, "%s: exec failed\n", argv[0]);
+        exit(1);
+    }
+    printf("PID | In Use | Queue no | Original Tickets | Current Tickets | Time Slices\n");
+    for(int i=0;i<NPROC;i++){
+        if(p.pid[i]==0) continue;
+        printf("%d\t%d\t%d\t%d\t\t%d\t\t%d\n",
+            p.pid[i],
+            p.inuse[i],
+            p.inQ[i],
+            p.tickets_original[i],
+            p.tickets_current[i],
+            p.total_time_slices[i]);
+        
+    }
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..70eaf6b 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct pstat; //OFFLINE 3............
 
 // system calls
 int fork(void);
@@ -22,6 +23,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int settickets(int number);  //OFFLINE 3............
+int getpinfo(struct pstat *); //OFFLINE 3..........
+
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..18c262c 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("settickets"); #OFFLINE 3
+entry("getpinfo");   #OFFLINE 3
\ No newline at end of file
